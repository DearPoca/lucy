<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <title>new live</title>
    <div id="username" data-value={{ .username }}></div>
    <script src="/assets/js/common_links.js"></script>
    <script src="/assets/js/third_party/srs.sdk.js"></script>
    <script src="/assets/js/third_party/flv.min.js"></script>
    <link rel="stylesheet" href="/assets/css/table.css">
    <link rel="stylesheet" href="/assets/css/video-play-pages.css">
    <link rel="stylesheet" href="/assets/css/button.css">
</head>
<body>
    <br><br>
    <center id="center-content">
        <form id="new-live-form">
            <label for="liveTitle">Live Title:</label>
            <input type="text" id="liveTitle" name="liveTitle" required><br><br>
            <button type="button" onclick='StartLiveWithWebrtc("screen")'>screen sharing</button>
            <button type="button" onclick='StartLiveWithWebrtc("camera")'>camera capture</button>
            <button type="button" onclick='GetStreamingAddr()'>streaming addr</button>
        </form>
    </center>
</body>
<script>
    var liveName;
    var rtmpUrl;
    var flvUrl;
    var webrtcUrl;
    function NewLive() {
        let newLiveForm = document.getElementById("new-live-form");
        const xhr = new XMLHttpRequest();
        const formData = new FormData(newLiveForm);
        const url = "api/v1/new_live"

        const params = new URLSearchParams(formData).toString();

        xhr.open("GET", url + "?" + params, false);

        xhr.send();

        if (xhr.status === 200) {
            const response = JSON.parse(xhr.responseText);
            console.log(response)
            if (response["code"] == 200) {
                liveName = response["data"]["name"];
                rtmpUrl = response["data"]["rtmp_link"];
                flvUrl = response["data"]["flv_link"];
                webrtcUrl = response["data"]["webrtc_link"];
                newLiveForm.remove();
                return true;
            } else {
                window.alert("new live failed, err: " + response["msg"])
                return false;
            }
        }
    }

    function CreateLiveRecordButton(father) {
        let buttonRecord = document.createElement("button");
        father.appendChild(buttonRecord);
        buttonRecord.type = "button"
        buttonRecord.textContent = "record"
        buttonRecord.onclick = function () {
            const xhr = new XMLHttpRequest();
            const path = "/api/v1/record_live";
            const params = {
                "live_name": liveName
            }
            xhr.open("POST", path);

            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    const response = JSON.parse(xhr.responseText);
                    console.log(response)
                    if (response["code"] == 200) {
                        window.alert("record start");
                    } else {
                        window.alert("record failed, err: " + response["msg"]);
                    }
                }
            };

            xhr.send(JSON.stringify(params));
        }
        return buttonRecord;
    }

    function CreateVideoElement(father, id){
        let v_container = document.createElement("div");
        father.appendChild(v_container);
        v_container.id = "video-container"
        v_container.classList.add('v-container');

        let videoElement = document.createElement('video')
        v_container.appendChild(videoElement);
        videoElement.id = id
        videoElement.autoplay = true
        videoElement.controls = true
        videoElement.preload = "auto"
        videoElement.muted = true

        return videoElement
    }

    function GetStreamingAddr() {
        if (!NewLive()) {
            return;
        }
        let centerContent = document.getElementById("center-content");
        while (centerContent.firstChild) {
            centerContent.firstChild.remove()
        }

        let p = document.createElement("p");
        p.textContent = `streaming addr: `

        let textArea = document.createElement("textarea");
        textArea.textContent = rtmpUrl
        textArea.id = "rtmp-url"
        textArea.cols = 60
        textArea.readOnly = true

        let buttonCopy = document.createElement("button");
        buttonCopy.type = "button"
        buttonCopy.textContent = "copy"
        buttonCopy.onclick = function () {
            textArea.select();
            document.execCommand("Copy");
            alert("ok!");
        }

        let buttonWatch = document.createElement("button");
        buttonWatch.type = "button"
        buttonWatch.textContent = "watch"
        buttonWatch.onclick = function () {
            if (flvjs.isSupported()) {
                let video_id = "flv_player"
                let old_video = document.getElementById(video_id);
                if (old_video) {
                    old_video.remove()
                }
                let videoElement = CreateVideoElement(centerContent, video_id);

                let flvPlayer = flvjs.createPlayer({
                    type: 'flv',
                    url: flvUrl,
                    isLive: true
                })
                flvPlayer.attachMediaElement(videoElement);
                flvPlayer.load();
                flvPlayer.play();
            }
        }

        centerContent.appendChild(p);
        centerContent.appendChild(textArea);
        centerContent.appendChild(document.createElement("br"));
        centerContent.appendChild(document.createElement("br"));
        centerContent.appendChild(buttonCopy);
        centerContent.appendChild(buttonWatch);
        let recordButton = CreateLiveRecordButton(centerContent);
    }

    function StartLiveWithWebrtc(videoSrc) {
        if (!NewLive()) {
            return;
        }
        constraints = {
            audio: true,
            video: {
                width: {ideal: 1280, max: 1920}
            }
        };

        let centerContent = document.getElementById("center-content");
        while (centerContent.firstChild) {
            centerContent.firstChild.remove()
        }

        let video_id = "rtc-media-player";
        let old_video = document.getElementById(video_id);
        if (old_video) {
            old_video.remove()
        }
        let recordButton = CreateLiveRecordButton(centerContent);
        let videoElement = CreateVideoElement(centerContent, video_id);

        let sdk = new SrsRtcPublisherAsync(constraints, videoSrc);

        sdk.pc.onicegatheringstatechange = function (event) {
            if (sdk.pc.iceGatheringState === "complete") {
                console.log(sdk.pc.getSenders())
            }
        };

        sdk.publish(webrtcUrl).then(function (session) {
            console.log(session)
            videoElement.srcObject = sdk.stream
        }).catch(function (reason) {
            if (reason instanceof SrsError) {
                if (reason.name === 'HttpsRequiredError') {
                    alert(`WebRTC must be HTTPS or localhost：${reason.name} ${reason.message}`);
                } else {
                    alert(`${reason.name} ${reason.message}`);
                }
            }
            if (reason instanceof DOMException) {
                if (reason.name === 'NotFoundError') {
                    alert(`can not find devices：getUserMedia ${reason.name} ${reason.message}`);
                } else if (reason.name === 'NotAllowedError') {
                    alert(`devices are not allow：getUserMedia ${reason.name} ${reason.message}`);
                } else if (['AbortError', 'NotAllowedError', 'NotFoundError', 'NotReadableError', 'OverconstrainedError', 'SecurityError', 'TypeError'].includes(reason.name)) {
                    alert(`getUserMedia ${reason.name} ${reason.message}`);
                }
            }

            sdk.close();
            videoElement.hide();
            console.error(reason);
        });
    }
</script>
</html>